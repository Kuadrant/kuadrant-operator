## Note before using this example you will need cert-manager and a clusterissuer setup
apiVersion: networking.istio.io/v1beta1
kind: ServiceEntry
metadata:
  name: external-api
spec:
  hosts:
    - kuadrant.io
  location: MESH_EXTERNAL
  resolution: DNS
  ports:
    - number: 80
      name: http
      protocol: HTTP
    - number: 443
      name: https
      protocol: TLS
---
apiVersion: networking.istio.io/v1
kind: DestinationRule
metadata:
  name: external-api
spec:
  host: 'kuadrant.io'
  trafficPolicy:
    tls:
      mode: SIMPLE
      sni: kuadrant.io
---
apiVersion: gateway.networking.k8s.io/v1
kind: Gateway
metadata:
  name: public-api
spec:
  gatewayClassName: istio
  listeners:
    - name: public-tls
      port: 443
      hostname: 'public.cb.hcpapps.net'
      protocol: HTTPS
      allowedRoutes:
        namespaces:
          from: All
      tls:
        mode: Terminate
        certificateRefs:
          - name: public
            kind: Secret
---
apiVersion: gateway.networking.k8s.io/v1
kind: HTTPRoute
metadata:
  name: public-api
spec:
  parentRefs:
    - name: public-api
  hostnames:
    - 'public.cb.hcpapps.net'
  rules:
    - backendRefs:
        - name: kuadrant.io
          kind: Hostname
          group: networking.istio.io
          port: 443
      filters:
        - type: URLRewrite
          urlRewrite:
            hostname: kuadrant.io
---
apiVersion: kuadrant.io/v1
kind: TLSPolicy
metadata:
  name: tls
spec:
  targetRef:
    name: public-api
    group: gateway.networking.k8s.io
    kind: Gateway
  issuerRef:
    group: cert-manager.io
    kind: ClusterIssuer
    name: lets-encrypt-aws
---
apiVersion: kuadrant.io/v1
kind: DNSPolicy
metadata:
  name: dns
spec:
  targetRef:
    group: gateway.networking.k8s.io
    kind: Gateway
    name: public-api
  providerRefs:
    - name: aws-provider-credentials
