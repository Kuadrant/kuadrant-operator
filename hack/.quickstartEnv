# shellcheck shell=bash

export TOOLS_IMAGE=quay.io/kuadrant/mgc-tools:latest
SCRIPT_DIR="$(cd "$(dirname "$0")" && pwd)"
export TMP_DIR=$SCRIPT_DIR/tmp/mgc

containerRuntime() {
  local container_runtime=""
  if command -v podman &> /dev/null; then
    container_runtime="podman"
  elif command -v docker &> /dev/null; then
    container_runtime="docker"
  else
    echo "Neither Docker nor Podman is installed. Exiting..."
    exit 1
  fi
  echo "$container_runtime"
}

export CONTAINER_RUNTIME_BIN=$(containerRuntime)

dockerBinCmd() {
  local network=""
  if [ ! -z "${KIND_CLUSTER_DOCKER_NETWORK}" ]; then
    network=" --network ${KIND_CLUSTER_DOCKER_NETWORK}"
  fi

  echo "$CONTAINER_RUNTIME_BIN run --rm -u $UID -v ${TMP_DIR}:${TMP_DIR}${network} -e KUBECONFIG=${TMP_DIR}/kubeconfig --entrypoint=$1 $TOOLS_IMAGE"
}

export KIND_BIN=kind
export HELM_BIN=helm
export KUSTOMIZE_BIN=$(dockerBinCmd "kustomize")

requiredENV() {

  echo "Enter which DNS provider you will be using (gcp/aws)"
  read PROVIDER </dev/tty
  if [[ "$PROVIDER" =~ ^(gcp|aws)$ ]]; then
    echo "Provider chosen: $PROVIDER."
    export DNS_PROVIDER=$PROVIDER
  else
    echo "Invalid input given. Please enter either 'gcp' or 'aws' (case sensitive)."
    exit 1
  fi

  if [[ "$PROVIDER" == "aws" ]]; then
    if [[ -z "${KUADRANT_AWS_ACCESS_KEY_ID}" ]]; then
    echo "Enter an AWS access key ID for an account where you have access to Route53:"
    read KUADRANT_AWS_ACCESS_KEY_ID </dev/tty
    echo "export KUADRANT_AWS_ACCESS_KEY_ID for future executions of the script to skip this step"
    fi

    if [[ -z "${KUADRANT_AWS_SECRET_ACCESS_KEY}" ]]; then
    echo "Enter the corresponding AWS secret access key for the AWS access key ID entered above:"
    read KUADRANT_AWS_SECRET_ACCESS_KEY </dev/tty
    echo "export KUADRANT_AWS_SECRET_ACCESS_KEY for future executions of the script to skip this step"
    fi

    if [[ -z "${KUADRANT_AWS_REGION}" ]]; then
    echo "Enter an AWS region (e.g. eu-west-1) for an Account where you have access to Route53:"
    read KUADRANT_AWS_REGION </dev/tty
    echo "export KUADRANT_AWS_REGION for future executions of the script to skip this step"
    fi

    if [[ -z "${KUADRANT_AWS_DNS_PUBLIC_ZONE_ID}" ]]; then
    echo "Enter the Public Zone ID of your Route53 zone:"
    read KUADRANT_AWS_DNS_PUBLIC_ZONE_ID </dev/tty
    echo "export KUADRANT_AWS_DNS_PUBLIC_ZONE_ID for future executions of the script to skip this step"
    fi

    if [[ -z "${KUADRANT_ZONE_ROOT_DOMAIN}" ]]; then
    echo "Enter the root domain of your Route53 hosted zone (e.g. www.example.com):"
    read KUADRANT_ZONE_ROOT_DOMAIN </dev/tty
    echo "export KUADRANT_ZONE_ROOT_DOMAIN for future executions of the script to skip this step"
    fi
  else 
      if [[ -z "${GOOGLE}" ]]; then
      echo "Enter either credentials created either by CLI or by service account (Please make sure the credentials provided are in JSON format)"
      read GOOGLE </dev/tty
      echo "export GOOGLE for future executions of the script to skip this step"
      fi
      if ! jq -e . <<< "$GOOGLE" >/dev/null 2>&1; then
          echo "Credentials provided is not in JSON format"
          exit 1
      fi
        
      if [[ -z "${PROJECT_ID}" ]]; then
      echo "Enter the project id for your GCP Cloud DNS:"
      read PROJECT_ID </dev/tty
      echo "export PROJECT_ID for future executions of the script to skip this step"
      fi

      if [[ -z "${ZONE_DNS_NAME}" ]]; then
      echo "Enter the DNS name for your GCP Cloud DNS:"
      read ZONE_DNS_NAME </dev/tty
      echo "export ZONE_DNS_NAME for future executions of the script to skip this step"
      fi

      if [[ -z "${ZONE_NAME}" ]]; then
      echo "Enter the Zone name for your GCP Cloud DNS:"
      read ZONE_NAME </dev/tty
      echo "export ZONE_NAME for future executions of the script to skip this step"
      fi
    fi 
}

configureController(){
  postDeployMGCHub ${1} ${2}
} 

postDeployMGCHub() {
    clusterName=${1}
    namespace=${2}
    kubectl config use-context kind-${clusterName}
    echo "Running post MGC deployment setup on ${clusterName}"

    case $DNS_PROVIDER in
      aws)
          echo "Setting up an AWS Route 53 DNS provider"
          setupAWSProvider ${namespace}
          ;;
      gcp)
          echo "Setting up a Google Cloud DNS provider"
          setupGCPProvider ${namespace}
          ;;
      *)
        echo "Unknown DNS provider"
        exit
        ;;
    esac
}
